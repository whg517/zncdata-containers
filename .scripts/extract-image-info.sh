#!/bin/bash

# extract-image-info.sh - Docker Bake Digest Information Extractor
#
# This script extracts image names, tags, and SHA256 digests from docker-bake-digests.json
# files generated by docker buildx bake command. It supports multiple output formats
# for different use cases like automation, signing, and reporting.
#
# Author: Generated for zncdatadev containers project
# Version: 1.0
# Dependencies: jq (JSON processor)
#
# Exit codes:
#   0 - Success
#   1 - General error (invalid arguments, missing files, etc.)
#   3 - jq parsing error

set -e
set -o pipefail

# Global constants
readonly SUPPORTED_FORMATS="json image name-only tag-only digest-only image-digest"

# Main function - entry point of the script
# Parses command line arguments and orchestrates the image information extraction
# Arguments:
#   $@ - all command line arguments passed to the script
# Returns:
#   0 - success
#   1 - error (invalid arguments, missing files, etc.)
# Side effects:
#   - Prints help message or extracted image information to stdout/file
#   - May exit the script with error code on failure
function main() {
  local cmd_name=$(basename $0)
  local usage="
Usage: ${cmd_name} [OPTIONS] [DIGEST_FILE]

Extract image names, tags, and digests from docker-bake-digests.json file.

Arguments:
  DIGEST_FILE              Path to the docker-bake-digests.json file.
                          Default: ./docker-bake-digests.json

Options:
  -f, --format FORMAT     Output format: 'json', 'image', 'name-only', 'tag-only', 'digest-only', 'image-digest'
                          Default: 'json'
                          - json: Complete JSON with all format information in structured format
                          - image: Full image names with tags (registry/repository:tag)
                          - name-only: Image names without tags (registry/repository)
                          - tag-only: Only the tags (version-kubedoop...)
                          - digest-only: Only SHA256 digests
                          - image-digest: Image name with digest (name@digest)
  -o, --output FILE       Output to file instead of stdout
  -h, --help              Show this message

Examples:
  # Show all images in JSON format
  ${cmd_name}

  # Show full image names with tags
  ${cmd_name} --format image

  # Show only image names (without tags)
  ${cmd_name} --format name-only

  # Show only tags
  ${cmd_name} --format tag-only

  # Get digest for specific image (useful for signing)
  ${cmd_name} --format digest-only

  # Get image name with digest (useful for pulling by digest)
  ${cmd_name} --format image-digest
"

  local digest_file="./docker-bake-digests.json"
  local format="json"
  local output_file=""

  # Parse arguments
  while [ "$1" != "" ]; do
    case $1 in
      -f | --format )
        shift
        format=$1
        ;;
      -o | --output )
        shift
        output_file=$1
        ;;

      -h | --help )
        echo "$usage"
        exit 0
        ;;
      * )
        # Handle non-option argument as digest file path
        if [[ $1 != -* ]]; then
          digest_file=$1
        else
          echo "Error: Invalid argument '$1'"
          echo "$usage"
          exit 1
        fi
        ;;
    esac
    shift
  done

  # Validate inputs and prerequisites
  validate_prerequisites "$digest_file" "$format"

  # Extract image information
  extract_image_info "$digest_file" "$format" "$output_file"
}

# Validate prerequisites and input parameters
# Checks for file existence, jq availability, and format validity
# Arguments:
#   $1: digest_file - path to docker-bake-digests.json file
#   $2: format - requested output format
# Returns:
#   0 - all validations passed
# Side effects:
#   - Exits script with code 1 on validation failure
#   - Prints error messages to stderr
function validate_prerequisites() {
  local digest_file="$1"
  local format="$2"

  # Check if digest file exists and is readable
  if [ ! -f "$digest_file" ]; then
    echo "ERROR: Digest file not found: $digest_file" >&2
    exit 1
  fi

  if [ ! -r "$digest_file" ]; then
    echo "ERROR: Digest file is not readable: $digest_file" >&2
    exit 1
  fi

  # Check if jq is available
  if ! command -v jq > /dev/null; then
    echo "ERROR: jq is required but not installed." >&2
    echo "Please install jq: https://stedolan.github.io/jq/download/" >&2
    exit 1
  fi

  # Validate format parameter
  if [[ ! " $SUPPORTED_FORMATS " =~ " $format " ]]; then
    echo "ERROR: Unsupported format: $format" >&2
    echo "Supported formats: $SUPPORTED_FORMATS" >&2
    exit 1
  fi

  # Validate JSON structure of digest file
  if ! jq empty "$digest_file" 2>/dev/null; then
    echo "ERROR: Invalid JSON format in digest file: $digest_file" >&2
    exit 1
  fi
}

# Extract image information from docker-bake-digests.json file
# This function acts as a dispatcher, calling the appropriate format-specific function
# based on the requested output format
# Arguments:
#   $1: digest_file - absolute or relative path to docker-bake-digests.json file
#   $2: format - output format (json|name-only|digest-only)
#   $3: output_file - output file path (empty string for stdout)
# Returns:
#   0 - success
#   1 - error (unsupported format)
# Side effects:
#   - Outputs formatted image information to stdout or specified file
#   - Prints error messages to stderr on failure
function extract_image_info() {
  local digest_file="$1"
  local format="$2"
  local output_file="$3"

  local output_cmd="cat"
  if [ -n "$output_file" ]; then
    output_cmd="tee $output_file"
  fi

  # Format validation is already done in validate_prerequisites
  case "$format" in
    "json")
      extract_json_format "$digest_file" | $output_cmd
      ;;
    "image")
      extract_image_full "$digest_file" | $output_cmd
      ;;
    "name-only")
      extract_names_only "$digest_file" | $output_cmd
      ;;
    "tag-only")
      extract_tags_only "$digest_file" | $output_cmd
      ;;
    "digest-only")
      extract_digests_only "$digest_file" | $output_cmd
      ;;
    "image-digest")
      extract_image_digest "$digest_file" | $output_cmd
      ;;
  esac
}

# Extract image information in JSON format
# Parses the docker-bake-digests.json file and outputs a structured JSON array
# containing all available format information (target, image, name_only, tag_only, etc.)
# Arguments:
#   $1: digest_file - path to docker-bake-digests.json file
# Returns:
#   0 - success
#   non-zero - jq parsing error
# Output:
#   JSON array with objects containing: target, image, name_only, tag_only, digest, image_digest, platform, created
# Dependencies:
#   - requires jq command to be available
function extract_json_format() {
  local digest_file="$1"

  jq '
    to_entries | map({
      target: .key,
      image: (.value["image.name"] // null),
      name_only: (
        (.value["image.name"] // null) |
        if . != null and . != "" then
          split(":")[0]
        else
          null
        end
      ),
      tag_only: (
        (.value["image.name"] // null) |
        if . != null and . != "" and contains(":") then
          split(":")[1]
        else
          null
        end
      ),
      digest: (.value["containerimage.digest"] // null),
      image_digest: (
        (.value["image.name"] // null) as $image_name |
        (.value["containerimage.digest"] // null) as $digest |
        if $image_name != null and $digest != null and $image_name != "" and $digest != "" then
          ($image_name | split(":")[0]) + "@" + $digest
        else
          null
        end
      ),
      platform: (
        if .value["containerimage.descriptor"].platform then
          .value["containerimage.descriptor"].platform.os + "/" + .value["containerimage.descriptor"].platform.architecture
        else
          null
        end
      ),
      created: (.value["containerimage.descriptor"].annotations["org.opencontainers.image.created"] // null)
    })
  ' "$digest_file"
}

# Extract full image names from digest file (with tags)
# Outputs complete image names including tags, exactly as stored in image.name field
# Arguments:
#   $1: digest_file - path to docker-bake-digests.json file
# Returns:
#   0 - success
#   non-zero - jq parsing error
# Output:
#   Plain text, one full image name per line (format: registry/repository:tag)
# Dependencies:
#   - requires jq command to be available
function extract_image_full() {
  local digest_file="$1"

  jq -r '
    to_entries[] |
    .value["image.name"] // empty
  ' "$digest_file"
}

# Extract only image names from digest file (without tags)
# Outputs one image name per line without the tag portion, useful for automation
# Arguments:
#   $1: digest_file - path to docker-bake-digests.json file
# Returns:
#   0 - success
#   non-zero - jq parsing error
# Output:
#   Plain text, one image name per line (format: registry/repository)
# Dependencies:
#   - requires jq command to be available
function extract_names_only() {
  local digest_file="$1"

  jq -r '
    to_entries[] |
    (.value["image.name"] // empty) |
    if . != "" then
      split(":")[0]
    else
      empty
    end
  ' "$digest_file"
}

# Extract only tags from digest file
# Outputs one tag per line (the part after colon in image name), useful for version tracking
# Arguments:
#   $1: digest_file - path to docker-bake-digests.json file
# Returns:
#   0 - success
#   non-zero - jq parsing error
# Output:
#   Plain text, one tag per line (format: version-kubedoop...)
# Dependencies:
#   - requires jq command to be available
function extract_tags_only() {
  local digest_file="$1"

  jq -r '
    to_entries[] |
    (.value["image.name"] // empty) |
    if . != "" and contains(":") then
      split(":")[1]
    else
      empty
    end
  ' "$digest_file"
}

# Extract image names with digests from digest file
# Outputs image name combined with SHA256 digest, useful for pulling by digest
# Arguments:
#   $1: digest_file - path to docker-bake-digests.json file
# Returns:
#   0 - success
#   non-zero - jq parsing error
# Output:
#   Plain text, one image@digest per line (format: registry/repository@sha256:...)
# Dependencies:
#   - requires jq command to be available
function extract_image_digest() {
  local digest_file="$1"

  jq -r '
    to_entries[] |
    . as $entry |
    (.value["image.name"] // empty) as $image_name |
    (.value["containerimage.digest"] // empty) as $digest |
    if $image_name != "" and $digest != "" then
      ($image_name | split(":")[0]) + "@" + $digest
    else
      empty
    end
  ' "$digest_file"
}

# Extract only SHA256 digests from digest file
# Outputs one digest per line, useful for image signing and verification workflows
# Arguments:
#   $1: digest_file - path to docker-bake-digests.json file
# Returns:
#   0 - success
#   non-zero - jq parsing error
# Output:
#   Plain text, one SHA256 digest per line (format: sha256:...)
# Dependencies:
#   - requires jq command to be available
function extract_digests_only() {
  local digest_file="$1"

  jq -r '
    to_entries[] |
    .value["containerimage.digest"] // empty
  ' "$digest_file"
}

# Script execution entry point
# Calls main function with all command line arguments
main "$@"
